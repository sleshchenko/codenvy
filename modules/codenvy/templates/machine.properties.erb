# ###################################
# This file is managed by puppet
# PLEASE DON'T MODIFY BY HAND
# ###################################

machine.project.location=/opt/codenvy-data/che-machines
che.workspace.logs=/opt/codenvy-data/che-machines-logs

# docker registry for snapshots
che.docker.registry=<%= scope.lookupvar('codenvy::host_url') %>:5000
# namespace for snapshots
che.docker.namespace=NULL
che.docker.unused_containers_cleanup_min=60

# swarm
docker.client.daemon_url=http://codenvy-swarm:2375
swarm.client.node_description_length=9

# terminal
#TODO REMOVE THIS
che.workspace.terminal_linux_amd64=/home/codenvy-user/Downloads/terminal
# ws agent
#TODO REMOVE THIS
che.workspace.agent.dev=/home/codenvy-user/Downloads/ws-agent.tar.gz

machine.ws_agent.run_command=<%= scope.lookupvar('codenvy::machine_ws_agent_run_command') %>
che.workspace.agent.dev.max_start_time_ms=<%= scope.lookupvar('codenvy::machine_ws_agent_max_start_time_ms') %>
che.workspace.agent.dev.ping_delay_ms=2000
che.workspace.agent.dev.ping_conn_timeout_ms=2000
che.workspace.agent.dev.ping_timeout_error_msg=Timeout. The Che server is unable to ping your workspace. This implies a network configuration issue, workspace boot failure, or an unusually slow workspace boot.

machine.ws_agent.agent_api.path=/wsagent/ext/
machine.ws_agent.inactive_stop_timeout_ms=<%= scope.lookupvar('codenvy::machine_ws_agent_inactive_stop_timeout_ms') %>

# When Che start an agent, it performs check if it is launched.
che.agent.dev.max_start_time_ms=120000
che.agent.dev.ping_delay_ms=2000

router.nats.url=nats://localhost:4222
machine.router.routing_pattern=%4$s-%1$s.machines.<%= scope.lookupvar('codenvy::host_url') %>

# backup
machine.backup.backup_script=/opt/codenvy-data/conf/rsyncbackup.sh
machine.backup.restore_script=/opt/codenvy-data/conf/rsyncrestore.sh
machine.backup.backup_duration_second=300
machine.backup.restore_duration_second=300
machine.backup.backup_period_second=360

#cleanup workspace files
workspace.projects_storage.cleanup.script_path=/opt/codenvy-data/conf/cleanUpWorkspaceStorage.sh
workspace.projects_storage.cleanup.timeout_seconds=300

# machine default memory allocation
che.workspace.default_memory_mb=<%= scope.lookupvar('codenvy::machine_default_mem_size_mb') %>

# path to machine predefined recipes
local.recipe.path=

# extra hosts which will be used in machines
che.workspace.hosts=<%= scope.lookupvar('codenvy::machine_extra_hosts') %>
che.docker.tcp_connection_timeout_ms=600000
docker.connection.tcp.read_timeout_ms=600000
che.docker.always_pull_image=true
che.docker.api=1.20

# https support
machine.proxy_wsagent_server_url_template=<%= scope.lookupvar('codenvy::host_protocol') %>://<%= scope.lookupvar('codenvy::host_url') %>/%3$s_%2$s/%4$s
machine.proxy_terminal_server_url_template=<%= scope.lookupvar('codenvy::host_protocol') %>://<%= scope.lookupvar('codenvy::host_url') %>/%3$s_%2$s/%4$s


# If true, then all docker machines will start in privilege mode.
che.docker.privilege=<%= scope.lookupvar('codenvy::machine_docker_privilege_mode') %>

machine.docker.server.terminal.run_command=mkdir -p ~/che && cp /mnt/che/terminal -R ~/che && ~/che/terminal/che-websocket-terminal -addr :4411 -cmd /bin/bash -static ~/che/terminal/ -path '/[^/]+'

# Allows to use registry for machine docker snapshots, you should set this property to {true},
# otherwise workspace snapshots would be saved locally.
che.docker.registry_for_snapshots=true

# docker network driver
che.docker.network_driver=<%= scope.lookupvar('codenvy::che_machine_docker_network_driver') %>

# Allows to adjust machine swap memory by multiplication current machnine memory on provided value.
# default is 0 which means disabled swap, if set multiplier value equal to 0.5 machine swap will be
# configured with size that equal to half of current machine memory.
che.docker.swap=<%= scope.lookupvar('codenvy::machine_docker_memory_swap_multiplier') %>

# java opts for dev machine
che.workspace.java_opts=-Xms256m -Xmx2048m -Djava.security.egd=file:/dev/./urandom <% if ! @http_proxy_for_codenvy.empty? or ! @https_proxy_for_codenvy.empty? -%>-Dhttp.proxySet=true<% end -%><% if ! @http_proxy_for_codenvy.empty? -%><% if ! @http_proxy_for_codenvy.empty? and @http_proxy_for_codenvy.include? '@' -%> -Dhttp.proxyUser=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[0] %> -Dhttp.proxyPassword=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[1] %> -Dhttp.proxyHost=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[0] %> -Dhttp.proxyPort=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[1].gsub(/\/.*/,'') %><% else -%> -Dhttp.proxyHost=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[0] %> -Dhttp.proxyPort=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[1].gsub(/\/.*/,'') %><% end -%><% end -%><% if ! @https_proxy_for_codenvy.empty? -%><% if @https_proxy_for_codenvy.include? '@' -%> -Dhttps.proxyUser=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[0] %> -Dhttps.proxyPassword=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[1] %> -Dhttps.proxyHost=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[0] %> -Dhttps.proxyPort=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[1].gsub(/\/.*/,'') %><% else -%> -Dhttps.proxyHost=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[0] %> -Dhttps.proxyPort=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[1].gsub(/\/.*/,'') %><% end -%><% end -%><% if ! @no_proxy_for_codenvy.empty? -%> -Dhttp.nonProxyHosts='<%= @no_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').gsub(',','|') %>'<% end -%>

# extra volumes to mount, semicolon separated.
che.workspace.volume=<%= scope.lookupvar('codenvy::machine_server_extra_volume') %>

# public key for rsync
workspace.backup.public_key_path=/opt/codenvy-data/conf/ssh/key.pem.pub

# Switches strategy of synchronization of projects in a workspace. Needed for switching between codenvy in container and native. “rsync-agent" for codenvy in container, “rsync” for native.
codenvy.sync.strategy=rsync-agent

codenvy.workspace.projects_sync_port=0
